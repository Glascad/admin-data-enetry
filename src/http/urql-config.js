import { cacheExchange } from '@urql/exchange-graphcache';
import { Client, debugExchange, dedupExchange, fetchExchange } from 'urql';
import { map, pipe } from 'wonka';
import { normalizeQueryResponse } from '../utils/index.js';
import { getAuthorization } from './local-storage';
// schema automatically generated by postgraphile
import { data as schema } from '../schemas/_schema.json';

export default new Client({
    url: `${process.env.REACT_APP_BASE_URL}/graphql`,
    schema,
    fetchOptions: () => ({
        headers: {
            authorization: getAuthorization(),
        },
    }),
    fetch: async (url, options) => {
        const request = { url, options };
        const { body = '' } = options || {};
        console.log(`FETCHING: ${body.replace(/\\n/g, '\n')}`);
        console.log({ request });
        var result, status, statusText;
        try {
            result = await fetch(url, options);
            status = result.status;
            statusText = result.statusText;
            if (status > 299) throw new Error(statusText);
            else {
                console.log(`FETCH SUCCESS: ${status} - ${statusText}`);
                console.log({ result, request });
            }
        }
        catch (err) {
            console.error(`FETCH ERROR: ${status} - ${statusText}`);
            console.log({ result, err, request });
            console.error(err);
        }
    },
    exchanges: [
        dedupExchange,
        debugExchange,
        ({ forward }) => ops$ => pipe(
            ops$,
            forward,
            map(operation => ({
                ...operation,
                data: normalizeQueryResponse(operation),
            })),
        ),
        cacheExchange({}),
        fetchExchange,
    ],
});
